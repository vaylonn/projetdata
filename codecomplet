2.3 “# Données directement incluses dans le code
data_str = """
AT\tV\tAP\tRH\tEP
8.34\t40.77\t1010.84\t90.01\t480.48
23.64\t58.49\t1011.4\t74.2\t445.75
29.74\t56.9\t1007.15\t41.91\t438.76
19.07\t49.69\t1007.22\t76.79\t453.09
11.8\t40.66\t1017.13\t97.2\t464.43
13.97\t39.16\t1016.05\t84.6\t470.96
"""
# Utiliser pandas pour créer un DataFrame
import pandas as pd
from io import StringIO
df = pd.read_csv(StringIO(data_str), delimiter='\t')
# Statistiques descriptives
descriptive_stats = df.describe()
# Affichage des statistiques descriptives
print(descriptive_stats)
# Tracé de boxplots pour chaque variable
import matplotlib.pyplot as plt
df.boxplot()
plt.show()
“
2.2 “# Données directement incluses dans le code
data_str = """
AT\tV\tAP\tRH\tEP
8.34\t40.77\t1010.84\t90.01\t480.48
23.64\t58.49\t1011.4\t74.2\t445.75
29.74\t56.9\t1007.15\t41.91\t438.76
19.07\t49.69\t1007.22\t76.79\t453.09
11.8\t40.66\t1017.13\t97.2\t464.43
13.97\t39.16\t1016.05\t84.6\t470.96
"""
# Traitement des données sans pandas
lines = data_str.strip().split('\n')
header = lines[0].split('\t')
data = [line.split('\t') for line in lines[1:]]
# Vérification des valeurs manquantes
missing_values = False
for observation in data:
if '' in observation:
print("Missing values found.")
missing_values = True
break
if not missing_values:
print("No missing values found.")
“
2.1 “# Données directement incluses dans le code
data_str = """
T\tAP\tRH\tV\tEP
8.34\t40.77\t1010.84\t90.01\t480.48
23.64\t58.49\t1011.4\t74.2\t445.75
29.74\t56.9\t1007.15\t41.91\t438.76
...
"""
# Utiliser StringIO pour lire les données comme un fichier CSV
from io import StringIO
import pandas as pd
# Charger les données
data = pd.read_csv(StringIO(data_str), delimiter='\t')
# Affichage du nombre d'observations et de variables
num_observations, num_variables = data.shape
print(f"Number of observations: {num_observations}")
print(f"Number of variables: {num_variables}")
“
2.3.2# Importer les bibliothèques nécessaires
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
# Données directement incluses dans le code
data_str = """
AT\tV\tAP\tRH\tEP
8.34\t40.77\t1010.84\t90.01\t480.48
23.64\t58.49\t1011.4\t74.2\t445.75
29.74\t56.9\t1007.15\t41.91\t438.76
19.07\t49.69\t1007.22\t76.79\t453.09
11.8\t40.66\t1017.13\t97.2\t464.43
13.97\t39.16\t1016.05\t84.6\t470.96
"""
# Charger les données dans le DataFrame df
df = pd.read_csv(pd.io.common.StringIO(data_str), delimiter='\t')
# Standardiser les variables
scaler = StandardScaler()
df_standardized = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)
# Appliquer la PCA avec deux composantes principales
pca = PCA(n_components=2)
principal_components = pca.fit_transform(df_standardized)
# Afficher les résultats
print("Variance expliquée par chaque composante principale :")
print(pca.explained_variance_ratio_)
print("\nChargements des variables sur les deux premières composantes principales :")
print(pca.components_)
# Tracer les composantes principales
plt.figure(figsize=(8, 6))
plt.scatter(principal_components[:, 0], principal_components[:, 1])
plt.title("Représentation des deux premières composantes principales")
plt.xlabel("Première composante principale")
plt.ylabel("Deuxième composante principale")
plt.show()
